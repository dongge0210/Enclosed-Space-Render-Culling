plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang 在 1.18+ 向终端用户分发 Java 17,因此你的 mod 应该以 Java 17 为目标。
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // 映射可以随时更改,格式如下:
    // 通道:    版本:
    // official   MCVersion             Mojang 映射文件中的官方字段/方法名
    // parchment  YYYY.MM.DD-MCVersion  基于官方映射的社区参数名和 javadoc
    //
    // 使用 'official' 或 'parchment' 映射时,必须了解 Mojang 的许可协议。
    // 更多信息请见:https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment 是由 ParchmentMC 维护的非官方项目,与 MinecraftForge 独立
    // 使用其映射需额外设置:https://parchmentmc.org/docs/getting-started
    //
    // 使用非默认映射需自担风险,可能并不总是可用。
    // 更改映射后只需重新运行 setup 任务即可更新工作区。
    mappings channel: mapping_channel, version: mapping_version

    // 若为 true,所有 Eclipse/IntelliJ IDEA 运行配置在启动游戏前会运行对应的 "prepareX" 任务。
    // 大多数情况下无需启用。
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // 此属性允许配置 Gradle 的 ProcessResources 任务在 IDE 输出目录运行,启动游戏前执行。
    // 本模板必须设置为 true。
    // 详见:https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // 若为 true,将所有声明的运行配置的文件夹名添加到生成的 IDE 运行配置中。
    // 文件夹名可通过 "folderName" 属性设置。
    // 默认情况下,运行配置的文件夹名为包含它的 Gradle 项目名。
    // generateRunFolders = true

    // 此属性启用开发环境下的访问转换器。
    // 会应用到 Minecraft 构件。
    // 访问转换器文件可在项目任意位置。
    // 但最终 mod jar 中必须位于 "META-INF/accesstransformer.cfg",Forge 才能加载。
    // 默认位置是最佳实践,可自动放到最终 jar 的正确位置。
    // 更多信息见:https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // 默认运行配置。
    // 可根据需要调整、移除或复制。
    runs {
        // 适用于下方所有？行配置
        configureEach {
            workingDirectory project.file('run')

            // 推荐的 userdev 环境日志标记
            // 可根据需要添加/移除标记,用逗号分隔。
            // "SCAN": 用于 mod 扫描。
            // "REGISTRIES": 用于注册事件。
            // "REGISTRYDUMP": 用于获取所有注册表内容。
            property 'forge.logging.markers', 'REGISTRIES'

            // 推荐的控制台日志级别
            // 可设置不同级别。
            // 详见:https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // 以逗号分隔的命名空间列表,指定加载哪些 gametest。空为全部命名空间。
            property 'forge.enabledGameTestNamespaces', mod_id
            
            // 调整日志级别，避免调试信息刷屏
            property 'forge.logging.console.level', 'info'
            property 'forge.logging.markers', 'REGISTRIES'
            
            // Mixin refmap remapping 配置
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            
            // 调整服务器端日志级别
            property 'forge.logging.console.level', 'info'
            
            // Mixin refmap remapping 配置
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        // 此运行配置启动 GameTestServer 并运行所有已注册的 gametest,然后退出。
        // 默认情况下,若未提供 gametest,服务器会崩溃。
        // gametest 系统对其他运行配置也默认启用,可通过 /test 命令访问。
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
            
            // 测试服务器使用更低的日志级别
            property 'forge.logging.console.level', 'warn'
            
            // Mixin refmap remapping 配置
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        data {
            // 示例:覆盖上方 configureEach 设置的 workingDirectory
            workingDirectory project.file('run-data')

            // 指定数据生成的 modid、输出资源位置和现有资源查找路径。
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// 包含数据生成器生成的资源。
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    // Create Maven 仓库 - 仅在需要时使用
    maven { 
        url = "https://maven.createmod.net"
        content {
            includeGroup "com.simibubi.create"
            includeGroup "net.createmod.ponder"
            includeGroup "dev.engine-room.flywheel"
        }
    }
    maven { 
        url = "https://maven.tterrag.com/"
        content {
            includeGroup "com.tterrag.registrate"
        }
    }
    // Mixin Extras，放着需要留着
    maven {
        url = "https://repo.spongepowered.org/maven"
        content {
            includeGroup "io.github.llamalad7"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin 扩展 - 核心功能
    annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1")
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")
    
    // Create 及其依赖项 - 完全可选，避免强制依赖
    if (project.hasProperty('include_create_compat') && project.property('include_create_compat') == 'true') {
        compileOnly(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
        compileOnly(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
        compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}"))
        runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"))
        compileOnly(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))
    }
}

// 此代码块会在指定资源目标中展开所有声明的替换属性。
// 缺失属性会导致错误。属性使用 ${} Groovy 语法展开。
// 启用 "copyIdeResources" 时,IDE 环境下启动游戏前也会运行。
// 详见:https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// 示例:如何将属性写入 manifest 以便运行时读取。
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // 我们自己的版本号为 1
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // 推荐的 jar 混淆方法
    finalizedBy 'reobfJar'
}

// 若为多项目构建,开发时需未混淆 jar,可在发布时再��淆:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// 示例配置,允许使用 maven-publish 插件发布
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// 优化编译选项
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll([
        '-Xlint:deprecation',
        '-Xlint:unchecked',
        '-parameters' // 保留参数名
    ])
    
    // 提高编译性能
    options.fork = true
    options.incremental = true
}

// 清理任务优化
tasks.register('cleanDebug') {
    group = 'build'
    description = '清理调试相关的临时文件'
    doLast {
        delete fileTree(dir: 'run', includes: ['**/*.log', '**/debug-*.txt'])
        delete fileTree(dir: 'logs', includes: ['debug-*.log'])
    }
}

// 添加调试信息任务
tasks.register('debugInfo') {
    group = 'help'
    description = '显示项目调试信息'
    doLast {
        println "Mod ID: ${mod_id}"
        println "Mod Version: ${mod_version}"
        println "Minecraft Version: ${minecraft_version}"
        println "Forge Version: ${forge_version}"
        println "Java Version: ${System.getProperty('java.version')}"
        println "Gradle Version: ${gradle.gradleVersion}"
        
        if (project.hasProperty('include_create_compat')) {
            println "Create Compatibility: ${project.property('include_create_compat')}"
        } else {
            println "Create Compatibility: disabled (default)"
        }
    }
}

// 构建前清理
tasks.named('build').configure {
    dependsOn 'cleanDebug'
}

// 确保reobf过程不会截断包名
reobf {
    jar {
        // 使用默认的映射配置，避免包名截断
        // mappingType 在新版本中已不再需要手动指定
    }
}
