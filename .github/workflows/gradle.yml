name: Java CI for Minecraft Mod

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write  # 需要此权限来触发其他workflow

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 缓存Gradle依赖,加速构建
    - name: 缓存Gradle依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    # ForgeGradle证书校验关掉,防止国内构建抽风...这似乎没必要
    #- name: 关闭ForgeGradle证书校验
    #  run: echo "ORG_GRADLE_PROJECT_net_forgegradle_gradle_check_certs=false" >> $GITHUB_ENV

    - name: 构建Mod | Build Minecraft Mod
      run: ./gradlew build --no-daemon -info --max-workers=12 --parallel

    - name: 上传构建产物 | Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: minecraft-mod-jar
        path: build/libs/*.jar
        if-no-files-found: error

    # 生成项目目录树 | Generate Project Directory Tree
    - name: 生成项目目录树 | Generate Project Directory Tree
      run: |
        echo "## 项目目录结构 | Project Directory Structure" > directory-tree.md
        echo "" >> directory-tree.md
        echo "生成时间 | Generated at: $(date)" >> directory-tree.md
        echo "" >> directory-tree.md
        echo '```' >> directory-tree.md
        if command -v tree &> /dev/null; then
          tree -a -I '.git|.gradle|build|run|.idea|*.iml|*.ipr|*.iws|logs|mods|*.log' --dirsfirst
        else
          find . -type f -not -path './.git/*' -not -path './.gradle/*' -not -path './build/*' -not -path './run/*' -not -path './.idea/*' | sort
        fi >> directory-tree.md
        echo '```' >> directory-tree.md
        echo "" >> directory-tree.md
        echo "## 构建信息 | Build Information" >> directory-tree.md
        echo "- Minecraft版本 | Minecraft Version: $(grep 'minecraft_version=' gradle.properties | cut -d'=' -f2)" >> directory-tree.md
        echo "- Forge版本 | Forge Version: $(grep 'forge_version=' gradle.properties | cut -d'=' -f2)" >> directory-tree.md
        echo "- Create版本 | Create Version: $(grep 'create_version=' gradle.properties | cut -d'=' -f2)" >> directory-tree.md
        echo "- Mod版本 | Mod Version: $(grep 'mod_version=' gradle.properties | cut -d'=' -f2)" >> directory-tree.md
        echo "" >> directory-tree.md
        echo "## 构建文件 | Build Files" >> directory-tree.md
        echo '```' >> directory-tree.md
        ls -la build/libs/ || echo "No build files found"
        echo '```' >> directory-tree.md
        cat directory-tree.md

    - name: 上传目录树 | Upload Directory Tree
      uses: actions/upload-artifact@v4
      with:
        name: project-directory-tree
        path: directory-tree.md

    # 自动发布dev版本 | Auto Release Dev Version (仅在main分支push时)
    - name: 自动发布dev版本 | Auto Release Dev Version
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "构建成功，正在自动发布dev版本... | Build successful, auto releasing dev version..."
        echo "构建的文件 | Built files:"
        ls -la build/libs/
        echo ""
        echo "触发自动发布流程 | Triggering auto release workflow..."
        
        # 检查是否有可发布的jar文件
        if [ ! -f build/libs/*.jar ]; then
          echo "未找到jar文件，跳过发布 | No jar files found, skipping release"
          exit 0
        fi
        
        # 使用GitHub CLI触发release工作流，指定dev发布类型
        if gh workflow run release.yml \
          --field release_type=dev \
          --field cleanup_old=true; then
          echo "自动发布流程已触发成功 | Auto release workflow triggered successfully"
          echo "发布类型: dev | Release type: dev"
          echo "将清理旧版本 | Will cleanup old releases"
          echo "发布流程将在后台运行，请查看Actions页面获取详细信息 | Release workflow will run in background, check Actions page for details"
          echo "Actions页面: https://github.com/${{ github.repository }}/actions"
        else
          echo "触发发布流程失败 | Failed to trigger release workflow"
          echo "请手动检查GitHub Actions权限设置 | Please manually check GitHub Actions permissions"
          # 不退出失败，因为构建本身是成功的
        fi

  dependency-submission:
    runs-on: ubuntu-latest
    # 只在push时运行，避免PR时的权限问题
    if: github.event_name == 'push'
    # 确保权限正确配置 - 依赖图提交需要contents:write权限
    permissions:
      contents: write  # 依赖图提交必需的权限
      actions: read
      security-events: write
      # 添加依赖图提交所需权限
      pull-requests: read

    steps:
    - uses: actions/checkout@v4
    - name: 设置JDK 17 | Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 注意:需要在GitHub仓库设置中启用Dependency Graph功能
    # Note: Dependency Graph feature must be enabled in GitHub repository settings
    # 依赖图提交只在push时运行，PR时跳过以避免权限问题
    - name: 生成并提交依赖图 | Generate and Submit Dependency Graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      continue-on-error: true # 如果依赖图未启用则跳过,不影响构建 | Skip if dependency graph is not enabled
